// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views"]
}
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [timescaledb, vector]
}
model conversation {
  id                    String    @db.Uuid
  createdAt             DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt             DateTime  @updatedAt
  userId                String    @db.Uuid
  context               Json
  state                 String
  flowId                String
  feedback              feedback?
  @@unique([id])
}
model User {
  id           String   @id @db.Uuid
  createdAt    DateTime @default(now())
  identifier   String?
  isVerified   Boolean  @default(false)
  messages     Message[]

  deviceMetrics DeviceMetrics[]
}
model Message {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  text            String?
  audio           String?
  type            String
  userId          String   @db.Uuid
  user            User     @relation(fields: [userId], references: [id])
  flowId          String
  reaction        Int       @default(0) @db.SmallInt 
  messageType     String?
}
model Metrics {
  id              Int @id @default(autoincrement())
  createdAt       DateTime @default(now())
  name            String @unique
  value           String
}
model feedback {
  id                      Int             @id @default(autoincrement())
  conversation            conversation?   @relation(fields: [conversationId], references: [id])
  conversationId          String?         @db.Uuid @unique
  translation             Int             @default(0) @db.SmallInt 
  information             Int             @default(0) @db.SmallInt
  chatbotFunctionality    Int             @default(0) @db.SmallInt
  feedback                String?
}
model Scheme {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  mainQuestions MainQuestion[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}
model MainQuestion {
  id         Int          @id @default(autoincrement())
  intent     String
  question   String
  response   String
  scheme     Scheme       @relation(fields: [schemeId], references: [id])
  schemeId   Int
  variations Variations[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@index([schemeId])
}
model Variations {
  id             Int          @id @default(autoincrement())
  variation      String
  mainQuestion   MainQuestion @relation(fields: [mainQuestionId], references: [id])
  mainQuestionId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([mainQuestionId])
}
model ApiKey {
  id          Int      @id @default(autoincrement())
  apiKey      String   @unique
  owner       String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model Summary {
  id                 Int      @id @default(autoincrement())
  fileName           String
  schemeName         String?
  status             String   // "STARTED", "COMPLETED", "FAILED"
  mainQuestionsCount Int      @default(0)
  variationsCount    Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  errorMessage       String?

  @@index([status])
  @@index([fileName])
  @@index([createdAt])
}
model BiharKrishiMetrics {
  id          Int      @id @default(autoincrement())
  apiKey      String   // Masked API key
  question    String
  schemeName  String
  status      String   // SUCCESS or FAILURE
  createdAt   DateTime @default(now())
  
  @@index([apiKey])
  @@index([schemeName])
  @@index([status])
  @@index([createdAt])
}
model DeviceMetrics {
  id          String  @id @default(uuid())
  did         String
  sessionId   String
  userId      String   @db.Uuid  
  deviceType  String
  deviceName  String
  browserName String
  osName      String
  latitude    Float?
  longitude   Float?  
  state       String
  district    String
  language    String 
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id])
}